{"mappings":"MAAMA,uBACQC,EAAcC,QACnBD,aAAeE,6BACfD,YAAcE,4BACdC,QAGPA,aACOJ,aAAY,QACZC,YAAW,QACXI,gBAGPC,cACOL,YAAWM,KAAQN,YAAYO,MAAM,GAAG,QACxCH,gBAGPI,aAAaC,GACD,MAANA,GAAcH,KAASN,YAAYU,SAAQ,YAC1CV,YAAWM,KAAQN,YAAYW,WAAaF,EAAOE,YAG1DC,eAAeC,GACO,KAAlBP,KAAON,cACY,IAAnBM,KAAOP,cAAYO,KACdQ,eAEFD,UAAYA,OACZL,aAAYF,KAAMO,gBAClBd,aAAYO,KAAQN,iBACpBA,YAAW,IAGlBc,UACE,IAAIC,EACJ,MAAMC,EAAOC,WAAUX,KAAMP,aAAc,IACrCmB,EAAUD,WAAUX,KAAMN,YAAa,IAC7C,IAAImB,MAAMH,KAASG,MAAMD,GAAzB,aACaL,mBAETE,EAASC,EAAOE,gBAGhBH,EAASC,EAAOE,gBAGhBH,EAASC,EAAOE,gBAGhBH,EAASC,EAAOE,4BAKfnB,aAAY,QACZc,eAAYO,OACZpB,YAAce,EAAOJ,YAG5BU,iBAAiBZ,GACf,MAAMa,EAAcL,WAAWR,GAC/B,OAAIU,MAAMG,GAAW,GACdA,EAAYC,eAAc,MAGnCnB,gBACEF,uBAAuBsB,UAASlB,KAAQe,iBAAgBf,KAAMN,aAC9DC,wBAAwBuB,UAASlB,KAAQe,iBAAgBf,KAClDP,eAKX,MAAM0B,iBAAmBC,SAASC,iBAAgB,oBAC5CC,cAAgBF,SAASC,iBAAgB,iBACzC1B,wBAA0ByB,SAASG,cAAa,mBAChD3B,uBAAyBwB,SAASG,cAAa,kBAC/CC,aAAeJ,SAASG,cAAa,iBACrCE,aAAeL,SAASG,cAAa,iBACrCG,eAAiBN,SAASG,cAAa,oBAEvCI,WAAa,IAAInC,WACrBG,wBACAC,wBAGF0B,cAAcM,SAASC,IACrBA,EAAOC,iBAAgB,SAAWC,IAChCJ,WAAWzB,aAAa6B,EAAMC,cAAcC,QAAgB,QAC5DN,WAAW7B,sBAIfqB,iBAAiBS,SAASC,IACxBA,EAAOC,iBAAgB,SAAWC,IAChCJ,WAAWrB,eAAeyB,EAAMC,cAAcC,QAAmB,WACjEN,WAAW7B,sBAIf4B,eAAeI,iBAAgB,SAAQ,KACrCH,WAAW9B,WAGb4B,aAAaK,iBAAgB,SAAQ,KACnCH,WAAW5B,YAGbyB,aAAaM,iBAAgB,SAAQ,KACnCH,WAAWnB,UACXmB,WAAW7B","sources":["src/index.js"],"sourcesContent":["class Calculator {\r\n  constructor(previousLine, currentLine) {\r\n    this.previousLine = previousLineTextElement;\r\n    this.currentLine = currentLineTextElement;\r\n    this.clear();\r\n  }\r\n\r\n  clear() {\r\n    this.previousLine = \"\";\r\n    this.currentLine = \"\";\r\n    this.updateDisplay();\r\n  }\r\n\r\n  delete() {\r\n    this.currentLine = this.currentLine.slice(0, -1);\r\n    this.updateDisplay();\r\n  }\r\n\r\n  appendNumber(number) {\r\n    if (number === \".\" && this.currentLine.includes(\".\")) return;\r\n    this.currentLine = this.currentLine.toString() + number.toString();\r\n  }\r\n\r\n  choosOperation(operation) {\r\n    if (this.currentLine === \"\") return;\r\n    if (this.previousLine != \"\") {\r\n      this.compute();\r\n    }\r\n    this.operation = operation;\r\n    this.appendNumber(this.operation);\r\n    this.previousLine = this.currentLine;\r\n    this.currentLine = \"\";\r\n  }\r\n\r\n  compute() {\r\n    let result;\r\n    const prev = parseFloat(this.previousLine, 10);\r\n    const current = parseFloat(this.currentLine, 10);\r\n    if (isNaN(prev) || isNaN(current)) return;\r\n    switch (this.operation) {\r\n      case \"+\":\r\n        result = prev + current;\r\n        break;\r\n      case \"*\":\r\n        result = prev * current;\r\n        break;\r\n      case \"/\":\r\n        result = prev / current;\r\n        break;\r\n      case \"-\":\r\n        result = prev - current;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.previousLine = \"\";\r\n    this.operation = undefined;\r\n    this.currentLine = result.toString();\r\n  }\r\n\r\n  getDisplayNumber(number) {\r\n    const floatNumber = parseFloat(number);\r\n    if (isNaN(floatNumber)) return \"\";\r\n    return floatNumber.toLocaleString(\"en\");\r\n  }\r\n\r\n  updateDisplay() {\r\n    currentLineTextElement.innerHTML = this.getDisplayNumber(this.currentLine);\r\n    previousLineTextElement.innerHTML = this.getDisplayNumber(\r\n      this.previousLine\r\n    );\r\n  }\r\n}\r\n\r\nconst operationButtons = document.querySelectorAll(\"[data-operation]\");\r\nconst numberButtons = document.querySelectorAll(\"[data-number]\");\r\nconst previousLineTextElement = document.querySelector(\"[data-previous]\");\r\nconst currentLineTextElement = document.querySelector(\"[data-current]\");\r\nconst equalsButton = document.querySelector(\"[data-equals]\");\r\nconst deleteButton = document.querySelector(\"[data-delete]\");\r\nconst allClearButton = document.querySelector(\"[data-all-clear]\");\r\n\r\nconst calculator = new Calculator(\r\n  previousLineTextElement,\r\n  currentLineTextElement\r\n);\r\n\r\nnumberButtons.forEach((button) => {\r\n  button.addEventListener(\"click\", (event) => {\r\n    calculator.appendNumber(event.currentTarget.dataset[\"number\"]);\r\n    calculator.updateDisplay();\r\n  });\r\n});\r\n\r\noperationButtons.forEach((button) => {\r\n  button.addEventListener(\"click\", (event) => {\r\n    calculator.choosOperation(event.currentTarget.dataset[\"operation\"]);\r\n    calculator.updateDisplay();\r\n  });\r\n});\r\n\r\nallClearButton.addEventListener(\"click\", () => {\r\n  calculator.clear();\r\n});\r\n\r\ndeleteButton.addEventListener(\"click\", () => {\r\n  calculator.delete();\r\n});\r\n\r\nequalsButton.addEventListener(\"click\", () => {\r\n  calculator.compute();\r\n  calculator.updateDisplay();\r\n});\r\n"],"names":["Calculator","previousLine","currentLine","previousLineTextElement","currentLineTextElement","clear","updateDisplay","delete","this","slice","appendNumber","number","includes","toString","choosOperation","operation","compute","result","prev","parseFloat","current","isNaN","undefined","getDisplayNumber","floatNumber","toLocaleString","innerHTML","operationButtons","document","querySelectorAll","numberButtons","querySelector","equalsButton","deleteButton","allClearButton","calculator","forEach","button","addEventListener","event","currentTarget","dataset"],"version":3,"file":"index.a13901b5.js.map"}